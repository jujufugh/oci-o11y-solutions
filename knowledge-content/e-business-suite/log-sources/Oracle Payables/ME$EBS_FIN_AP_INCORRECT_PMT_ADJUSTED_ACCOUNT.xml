<?xml version="1.0" encoding="UTF-8"?>
<LoganContent oms_version="2.50.2.0.0" name="content_ocid1.tenancy.oc1..aaaaaaaa5s2vdjjrydixjulorcwozffbpna37w5a35p3jhgpyshlkmio6oiq_1650039506307" content_version="2.50.2.0.0" xmlns="http://www.oracle.com/DataCenter/LogAnalyticsStd">
    <Field oms_version="2.50.2.0.0">
        <DisplayName>sensor</DisplayName>
        <FieldType>1</FieldType>
        <IsSystem>0</IsSystem>
        <IsPrimary>1</IsPrimary>
        <DataType>STRING</DataType>
        <IsMetricKeyEligible>0</IsMetricKeyEligible>
        <IsMetricValueEligible>0</IsMetricValueEligible>
        <FacetEligible>1</FacetEligible>
        <RangeFacetEligible>0</RangeFacetEligible>
        <TableEligible>1</TableEligible>
        <FacetPriority>1</FacetPriority>
        <Summarizable>1</Summarizable>
        <HighCardinality>1</HighCardinality>
        <LargeData>0</LargeData>
        <MultiValued>0</MultiValued>
        <SMAEnabledSetting>0</SMAEnabledSetting>
    </Field>
    
    <Tag>
<Name>#medium_severity_sensor</Name>
<DisplayName>Medium Severity Sensor</DisplayName>
<IsSystem>0</IsSystem>
<ProblemPriority>MEDIUM</ProblemPriority>
</Tag>
    <Source name="EBS Sensor: FIN AP Payment adjustment events are accounted with incorrect amounts - Weekly" oms_version="2.50.2.0.0" configWarningSettings="0">
    <SourceType>database_sql</SourceType>
    <TargetTypes>
        <TargetType>omc_oracle_db_instance</TargetType>
        <TargetType>omc_oracle_pdb</TargetType>
    </TargetTypes>
    <DisplayName>EBS Sensor: FIN AP Payment adjustment events are accounted with incorrect amounts - Weekly</DisplayName>
    <Description><![CDATA[Checking for Payment adjustment events are accounted with incorrect amounts resulting in issues with the trial balance]]></Description>
    <IsSystem>0</IsSystem>
    <IsSecureContent>1</IsSecureContent>
    <Patterns>
        <DBPattern dateTimeField="entrytime" dateTimeColumns="entrytime">
        <SQLQuery>
            <![CDATA[select 'ME$EBS_FIN_AP_INCORRECT_PMT_ADJUSTED_ACCOUNT' sensor, to_timestamp(to_char(sysdate, 'YYYY-MM-DD hh24:mi:ss'), 'YYYY-MM-DD hh24:mi:ss') entrytime, 'check_id:' || s.check_id key_data FROM (SELECT      check_id check_id  FROM      (          WITH chks AS (              SELECT /*+ materialize */ DISTINCT                  ph.check_id              FROM                  apps.ap_payment_history_all ph              WHERE                  ph.accounting_date BETWEEN ( trunc(sysdate) - 7 ) AND ( trunc(sysdate) + 3 )          )  SELECT /*+ leading(chks) */ DISTINCT            aph.check_id,            aph.related_event_id,            aip.invoice_id,            aip.invoice_payment_id,            aphd.all_inv_dist_base_sum,            aip.invoice_base_amount,            aip.amount,            nvl( aip.invoice_base_amount, aip.amount ) -              aphd.all_inv_dist_base_sum trx_amt_different,            aph.posted_flag     FROM  chks,          apps.ap_checks_all ac,          apps.ap_payment_history_all aph,          apps.ap_invoice_payments_all aip,          (            SELECT sum(nvl(aphd1.invoice_dist_base_amount,                     aphd1.invoice_dist_amount)) all_inv_dist_base_sum,                   sum(decode(aph1.accounting_event_id,                         aph1.related_event_id, nvl(aphd1.invoice_dist_base_amount,                           aphd1.invoice_dist_amount ),                         0)) pay_cr_inv_dist_sum,                   aph1.check_id,                   aph1.related_event_id,                   aphd1.invoice_payment_id            FROM apps.ap_payment_hist_dists aphd1,                 apps.ap_payment_history_all aph1            WHERE aph1.accounting_event_id = aphd1.accounting_event_id            AND   aphd1.payment_history_id = aph1.payment_history_id            AND   aph1.transaction_type NOT IN ('MANUAL PAYMENT ADJUSTED',                      'MANUAL REFUND ADJUSTED')            AND   aphd1.pay_dist_lookup_code IN ('CASH')            GROUP BY aph1.check_id, aph1.related_event_id, aphd1.invoice_payment_id          ) aphd     WHERE ac.check_id = chks.check_id     AND   ac.check_id = aph.check_id     AND   aph.check_id = aip.check_id     AND   ac.void_date is null     AND   aph.transaction_type IN ('PAYMENT ADJUSTED', 'REFUND ADJUSTED')     AND   nvl(aph.historical_flag, 'N') <> 'Y'     AND   aph.posted_flag = 'Y'     AND   aip.posted_flag = 'Y'     AND   aph.check_id = aphd.check_id     AND   aph.related_event_id = aphd.related_event_id     AND   aip.invoice_payment_id = aphd.invoice_payment_id     AND   aphd.all_inv_dist_base_sum <> nvl(aip.invoice_base_amount, aip.amount)     AND   aphd.pay_cr_inv_dist_sum = nvl(aip.invoice_base_amount, aip.amount)     AND   NOT EXISTS (             SELECT 'unacct pay adj event' FROM apps.ap_payment_history_all aph2             WHERE aph2.related_event_id = aph.related_event_id             AND   aph2.check_id = aph.check_id             AND   (aph2.posted_flag = 'N' OR                    nvl(aph2.historical_flag, 'x') = 'Y'))     AND   NOT EXISTS (             SELECT 'unaccounted dist' FROM apps.ap_invoice_distributions_all aid             WHERE aid.invoice_id = aip.invoice_id             AND   nvl(aid.posted_flag, 'N') = 'N')     AND   NOT EXISTS (             SELECT 'payment voided' FROM apps.ap_checks_all ac1             WHERE ac1.check_id = aph.check_id             AND   ac1.void_date is not null)     AND   NOT EXISTS (             SELECT 'inv payment reversed' FROM apps.ap_invoice_payments_all aip1             WHERE aip1.invoice_payment_id = aip.invoice_payment_id             AND nvl(aip1.reversal_flag,'N') = 'Y')      )  WHERE      ROWNUM < 11  ORDER BY      check_id) s]]>
        </SQLQuery>
        <IsInclude>1</IsInclude>
            <InUse>1</InUse>
            <DBQueryFieldList>
                <DBPatternSeqField>entrytime</DBPatternSeqField>
                <DBPatternField>
                    <DBQueryColName>sensor</DBQueryColName>
                    <FieldName>udfs1</FieldName>
                </DBPatternField>
                <DBPatternField>
                    <DBQueryColName>entrytime</DBQueryColName>
                    <FieldName>time</FieldName>
                </DBPatternField>
                <DBPatternField>
                                        <DBQueryColName>key_data</DBQueryColName>
                                        <FieldName>probkey</FieldName>
                                   </DBPatternField>
            </DBQueryFieldList>
            <IsSystem>0</IsSystem>
            <IsEnabled>1</IsEnabled>
            </DBPattern>
    </Patterns>
        <TagConditions>
            <TagCondition operator="CONTAINS_REGEX" field="udfs1" alertRuleVisible="0">
                <ConditionValues>
                    <ConditionValue>%</ConditionValue>
                </ConditionValues>
                <ConditionTags tagField="mtag">
                    <ConditionTag>#medium_severity_sensor</ConditionTag>
                </ConditionTags>
                <IsSystem>0</IsSystem>
                <IsEnabled>1</IsEnabled>
            </TagCondition>
        </TagConditions>
        <IsHidden>0</IsHidden>
        <IsSMAEnabled>0</IsSMAEnabled>
    </Source>
    <FieldNameMaps>
        <FieldNameMap>
            <Name>udfs1</Name>
            <DisplayName>sensor</DisplayName>
        </FieldNameMap>
        
    </FieldNameMaps>
</LoganContent>