<?xml version="1.0" encoding="UTF-8"?>
<LoganContent oms_version="2.50.2.0.0" name="content_ocid1.tenancy.oc1..aaaaaaaa5s2vdjjrydixjulorcwozffbpna37w5a35p3jhgpyshlkmio6oiq_1650039506307" content_version="2.50.2.0.0" xmlns="http://www.oracle.com/DataCenter/LogAnalyticsStd">
    <Field oms_version="2.50.2.0.0">
        <DisplayName>sensor</DisplayName>
        <FieldType>1</FieldType>
        <IsSystem>0</IsSystem>
        <IsPrimary>1</IsPrimary>
        <DataType>STRING</DataType>
        <IsMetricKeyEligible>0</IsMetricKeyEligible>
        <IsMetricValueEligible>0</IsMetricValueEligible>
        <FacetEligible>1</FacetEligible>
        <RangeFacetEligible>0</RangeFacetEligible>
        <TableEligible>1</TableEligible>
        <FacetPriority>1</FacetPriority>
        <Summarizable>1</Summarizable>
        <HighCardinality>1</HighCardinality>
        <LargeData>0</LargeData>
        <MultiValued>0</MultiValued>
        <SMAEnabledSetting>0</SMAEnabledSetting>
    </Field>
    
    <Tag>
<Name>#medium_severity_sensor</Name>
<DisplayName>Medium Severity Sensor</DisplayName>
<IsSystem>0</IsSystem>
<ProblemPriority>MEDIUM</ProblemPriority>
</Tag>
    <Source name="EBS Sensor: FIN AP Stuck invoice after PPR is terminated or completed - Weekly" oms_version="2.50.2.0.0" configWarningSettings="0">
    <SourceType>database_sql</SourceType>
    <TargetTypes>
        <TargetType>omc_oracle_db_instance</TargetType>
        <TargetType>omc_oracle_pdb</TargetType>
    </TargetTypes>
    <DisplayName>EBS Sensor: FIN AP Stuck invoice after PPR is terminated or completed - Weekly</DisplayName>
    <Description><![CDATA[Checks for all cases where invoices that are marked as selected by a PPR and can no longer be updated, as available for payment.]]></Description>
    <IsSystem>0</IsSystem>
    <IsSecureContent>1</IsSecureContent>
    <Patterns>
        <DBPattern dateTimeField="entrytime" dateTimeColumns="entrytime">
        <SQLQuery>
            <![CDATA[select 'ME$EBS_FIN_AP_INV_TERM_PPR' sensor, to_timestamp(to_char(sysdate, 'YYYY-MM-DD hh24:mi:ss'), 'YYYY-MM-DD hh24:mi:ss') entrytime, 'invoice_id:' || s.invoice_id key_data FROM (SELECT      invoice_id invoice_id  FROM      (          WITH invs AS (              SELECT /*+ materialize */ DISTINCT                  invoice_id              FROM                  apps.ap_invoice_distributions_all              WHERE                  accounting_date BETWEEN ( trunc(sysdate) - 7 ) AND ( trunc(sysdate) + 3 )          )  /*SPLIT_HERE*/          SELECT /*+ ordered use_nl(ai, aps, aisc, asi) */              ai.invoice_id,              ai.org_id          FROM              invs,              apps.ap_invoices_all               ai,              apps.ap_payment_schedules_all      aps,              apps.ap_inv_selection_criteria_all aisc,              apps.ap_selected_invoices_all      asi          WHERE                  ai.invoice_id = invs.invoice_id              AND aps.invoice_id = ai.invoice_id              AND aisc.checkrun_id = aps.checkrun_id              AND asi.checkrun_id = aisc.checkrun_id              AND NOT EXISTS (                  SELECT /*+ no_unnest */                      'Corresponding PSR'                  FROM                      apps.iby_pay_service_requests ipsr                  WHERE                          ipsr.calling_app_id = 200                      AND ipsr.call_app_pay_service_req_code = aisc.checkrun_name              )              AND aisc.status IN ( 'CANCELING', 'CANCELED', 'SELECTING', 'CALCULATING', 'REVIEW',                                   'SELECTED' )          UNION /* CASE 1.1 - No data in asi/aps - specially for UNSTARTED case*/          SELECT /*+ ordered use_nl(ai, aps, aisc) */              ai.invoice_id,              ai.org_id          FROM              invs,              apps.ap_invoices_all               ai,              apps.ap_payment_schedules_all      aps,              apps.ap_inv_selection_criteria_all aisc          WHERE                  ai.invoice_id = invs.invoice_id              AND aps.invoice_id = ai.invoice_id              AND aisc.checkrun_id = aps.checkrun_id              AND ( NOT EXISTS (                  SELECT /*+ no_unnest */                      'Corresponding PSR'                  FROM                      apps.iby_pay_service_requests ipsr                  WHERE                          ipsr.calling_app_id = 200                      AND ipsr.call_app_pay_service_req_code = aisc.checkrun_name              )                        OR EXISTS (                  SELECT                      'Corresponding PSR'                  FROM                      apps.iby_pay_service_requests ipsr                  WHERE                          ipsr.calling_app_id = 200                      AND ipsr.call_app_pay_service_req_code = aisc.checkrun_name                      AND apps.ap_payment_util_pkg.get_psr_status(ipsr.payment_service_request_id, ipsr.payment_service_request_status) = 'TERMINATED'              ) )              AND aisc.status IN ( 'CANCELING', 'SELECTING', 'CALCULATING', 'UNSTARTED', 'REVIEW',                                   'SELECTED' )              AND NOT EXISTS (                  SELECT /*+ no_unnest */                      1                  FROM                      apps.ap_selected_invoices_all asi                  WHERE                      asi.checkrun_id = aisc.checkrun_id              )              AND NOT EXISTS (                  SELECT /*+ no_unnest */                      1                  FROM                      apps.ap_payment_schedules_all aps                  WHERE                      aps.checkrun_id = aisc.checkrun_id              )          UNION /* CASE 2 */          SELECT /*+ ordered use_nl(ai, aps, aisc, ipsr) */              ai.invoice_id,              ai.org_id          FROM              invs,              apps.ap_invoices_all               ai,              apps.ap_payment_schedules_all      aps,              apps.ap_inv_selection_criteria_all aisc,              apps.iby_pay_service_requests      ipsr          WHERE                  ai.invoice_id = aps.invoice_id              AND aisc.checkrun_name = ipsr.call_app_pay_service_req_code              AND aps.checkrun_id = aisc.checkrun_id              AND ipsr.calling_app_id = 200              AND apps.ap_payment_util_pkg.get_psr_status(ipsr.payment_service_request_id, ipsr.payment_service_request_status) = 'TERMINATED'              AND ai.invoice_id = invs.invoice_id          UNION /* CASE 3 */          SELECT /*+ ordered use_nl(ai, aps, aisc, idp, ipsr) */              ai.invoice_id,              ai.org_id          FROM              invs,              apps.ap_invoices_all               ai,              apps.ap_payment_schedules_all      aps,              apps.ap_inv_selection_criteria_all aisc,              apps.iby_docs_payable_all          idp,              apps.iby_pay_service_requests      ipsr          WHERE                  ai.invoice_id = aps.invoice_id              AND aps.checkrun_id = aisc.checkrun_id              AND ipsr.call_app_pay_service_req_code = aisc.checkrun_name              AND ipsr.calling_app_id = 200              AND idp.calling_app_id = 200              AND idp.calling_app_doc_unique_ref1 = to_char(aps.checkrun_id)              AND idp.calling_app_doc_unique_ref2 = to_char(aps.invoice_id)              AND idp.calling_app_doc_unique_ref3 = to_char(aps.payment_num)              AND ipsr.payment_service_request_id = idp.payment_service_request_id              AND idp.document_status IN ( 'REMOVED', 'REMOVED_INSTRUCTION_TERMINATED', 'REMOVED_REQUEST_TERMINATED', 'REMOVED_PAYMENT_REMOVED',              'REMOVED_PAYMENT_SPOILED',                                           'FAILED_VALIDATION', 'PAYMENT_FAILED_VALIDATION', 'REJECTED', 'FAILED_BY_REJECTION_LEVEL', 'FAILED_BY_CALLING_APP',                                           'FAILED_BY_RELATED_DOCUMENT', 'REMOVED_PAYMENT_STOPPED', 'REMOVED_PAYMENT_VOIDED' )              AND ai.invoice_id = invs.invoice_id          UNION /* CASE 4 */          SELECT /*+ ordered use_nl(ai, aps, aisc, ipsr) */              ai.invoice_id,              ai.org_id          FROM              invs,              apps.ap_invoices_all               ai,              apps.ap_payment_schedules_all      aps,              apps.ap_inv_selection_criteria_all aisc,              apps.iby_pay_service_requests      ipsr          WHERE                  ai.invoice_id = aps.invoice_id              AND aps.checkrun_id = aisc.checkrun_id              AND ipsr.call_app_pay_service_req_code = aisc.checkrun_name              AND ipsr.calling_app_id = 200              AND apps.ap_payment_util_pkg.get_psr_status(ipsr.payment_service_request_id, ipsr.payment_service_request_status) = 'CONFIRMED'              AND NOT EXISTS (                  SELECT /*+ no_unnest */                      'Corresponding Docs Payable'                  FROM                      apps.iby_docs_payable_all idp                  WHERE                          idp.calling_app_doc_unique_ref1 = aps.checkrun_id                      AND idp.calling_app_doc_unique_ref2 = aps.invoice_id                      AND idp.calling_app_doc_unique_ref3 = aps.payment_num                      AND idp.payment_service_request_id = ipsr.payment_service_request_id              )              AND ai.invoice_id = invs.invoice_id          UNION /* CASE 5 */          SELECT /*+ ordered use_nl(ai, aps, aisc) */              ai.invoice_id,              ai.org_id          FROM              invs,              apps.ap_invoices_all               ai,              apps.ap_payment_schedules_all      aps,              apps.ap_inv_selection_criteria_all aisc          WHERE                  ai.invoice_id = aps.invoice_id              AND aps.checkrun_id = aisc.checkrun_id              AND NOT EXISTS (                  SELECT /*+ no_unnest */                      'Data in AP_SELECTED_INVOICES_ALL'                  FROM                      apps.ap_selected_invoices_all asi                  WHERE                      asi.checkrun_id = aisc.checkrun_id              )              AND ai.invoice_id = invs.invoice_id          UNION /* CASE 6 */          SELECT /*+ ordered use_nl(ai, aps, aisc) */              ai.invoice_id,              ai.org_id          FROM              invs,              apps.ap_invoices_all               ai,              apps.ap_payment_schedules_all      aps,              apps.ap_inv_selection_criteria_all aisc          WHERE                  ai.invoice_id = aps.invoice_id              AND aps.checkrun_id = aisc.checkrun_id              AND EXISTS (                  SELECT /*+ no_unnest */                      1                  FROM                      apps.ap_selected_invoices_all si2,                      apps.ap_payment_schedules_all ps                  WHERE                          si2.checkrun_id = aisc.checkrun_id                      AND si2.invoice_id = ps.invoice_id                      AND si2.payment_num = ps.payment_num                      AND ( ( si2.org_id IS NULL                              AND ps.org_id IS NOT NULL )                            OR si2.exclusive_payment_flag IS NULL                            OR ps.payment_method_code IS NULL                            OR si2.payment_amount IS NULL                            OR si2.payment_currency_code IS NULL                            OR aisc.check_date IS NULL )              )              AND ai.invoice_id = invs.invoice_id          UNION /* CASE 7 */          SELECT /*+ ordered use_nl(ai, aps, aisc, ipsr) */              ai.invoice_id,              ai.org_id          FROM              invs,              apps.ap_invoices_all               ai,              apps.ap_payment_schedules_all      aps,              apps.ap_inv_selection_criteria_all aisc,              apps.iby_pay_service_requests      ipsr,              apps.iby_docs_payable_all          idp          WHERE                  ai.invoice_id = aps.invoice_id              AND aps.checkrun_id = aisc.checkrun_id              AND ipsr.call_app_pay_service_req_code = aisc.checkrun_name              AND ipsr.calling_app_id = 200              AND apps.ap_payment_util_pkg.get_psr_status(ipsr.payment_service_request_id, ipsr.payment_service_request_status) = 'CONFIRMED'              AND idp.calling_app_doc_unique_ref1 = aps.checkrun_id              AND idp.calling_app_doc_unique_ref2 = aps.invoice_id              AND idp.calling_app_doc_unique_ref3 = aps.payment_num              AND idp.payment_service_request_id = ipsr.payment_service_request_id              AND idp.document_status IN ( 'PAYMENT_CREATED' )              AND EXISTS (                  SELECT /*+ ordered no_unnest */                      'AP Pmt Data Exists'                  FROM                      apps.ap_invoice_payments_all aip,                      apps.ap_payment_history_all  aph,                      apps.ap_checks_all           ac,                      apps.iby_docs_payable_all    idp                  WHERE                          idp.payment_id = ac.payment_id                      AND ac.check_id = aip.check_id                      AND aip.invoice_id = aps.invoice_id                      AND aip.payment_num = aps.payment_num                      AND aip.accounting_event_id = aph.accounting_event_id                      AND ac.check_id = aph.check_id                      AND nvl(aip.reversal_flag, 'N') <> 'Y'              )              AND ai.invoice_id = invs.invoice_id          UNION /* CASE 8 */          SELECT /*+ ordered  use_nl(ai, aps, aisc) */              ai.invoice_id,              ai.org_id          FROM              invs,              apps.ap_invoices_all               ai,              apps.ap_payment_schedules_all      aps,              apps.ap_inv_selection_criteria_all aisc          WHERE                  ai.invoice_id = aps.invoice_id              AND aps.checkrun_id = aisc.checkrun_id              AND EXISTS (                  SELECT /*+ no_unnest */                      1                  FROM                      apps.ap_selected_invoices_all si2,                      apps.ap_invoices_all          ai                  WHERE                          si2.checkrun_id = aisc.checkrun_id                      AND si2.invoice_id = ai.invoice_id                      AND si2.vendor_name IS NULL                      AND ai.vendor_id IS NOT NULL              )              AND ai.invoice_id = invs.invoice_id          UNION /* CASE 9 */          SELECT /*+ ordered  use_nl(ai, aps, aisc) */              ai.invoice_id,              ai.org_id          FROM              invs,              apps.ap_invoices_all               ai,              apps.ap_payment_schedules_all      aps,              apps.ap_inv_selection_criteria_all aisc,              apps.iby_pay_service_requests      ipsr,              apps.iby_payments_all              ipa,              apps.iby_pay_instructions_all      ipia,              apps.ce_payment_documents          cpd          WHERE                  ai.invoice_id = invs.invoice_id              AND aps.invoice_id = ai.invoice_id              AND aisc.checkrun_id = aps.checkrun_id              AND aisc.checkrun_name = ipsr.call_app_pay_service_req_code              AND ipsr.calling_app_id = 200              AND apps.ap_payment_util_pkg.get_psr_status(ipsr.payment_service_request_id, ipsr.payment_service_request_status) IN ( 'CONFIRMED',              'TERMINATED' )              AND ipsr.payment_service_request_id = ipa.payment_service_request_id              AND ipa.payment_instruction_id = ipia.payment_instruction_id              AND cpd.payment_instruction_id = ipia.payment_instruction_id              AND NOT EXISTS (                  SELECT /*+ no_unnest */                      1                  FROM                      apps.ap_selected_invoices_all asi                  WHERE                      asi.checkrun_id = aisc.checkrun_id              )              AND NOT EXISTS (                  SELECT /*+ no_unnest */                      1                  FROM                      apps.ap_payment_schedules_all aps                  WHERE                      aps.checkrun_id = aisc.checkrun_id              )  /*SPLIT_HERE*/      )  WHERE      ROWNUM < 11  ORDER BY      invoice_id) s]]>
        </SQLQuery>
        <IsInclude>1</IsInclude>
            <InUse>1</InUse>
            <DBQueryFieldList>
                <DBPatternSeqField>entrytime</DBPatternSeqField>
                <DBPatternField>
                    <DBQueryColName>sensor</DBQueryColName>
                    <FieldName>udfs1</FieldName>
                </DBPatternField>
                <DBPatternField>
                    <DBQueryColName>entrytime</DBQueryColName>
                    <FieldName>time</FieldName>
                </DBPatternField>
                <DBPatternField>
                                        <DBQueryColName>key_data</DBQueryColName>
                                        <FieldName>probkey</FieldName>
                                   </DBPatternField>
            </DBQueryFieldList>
            <IsSystem>0</IsSystem>
            <IsEnabled>1</IsEnabled>
            </DBPattern>
    </Patterns>
        <TagConditions>
            <TagCondition operator="CONTAINS_REGEX" field="udfs1" alertRuleVisible="0">
                <ConditionValues>
                    <ConditionValue>%</ConditionValue>
                </ConditionValues>
                <ConditionTags tagField="mtag">
                    <ConditionTag>#medium_severity_sensor</ConditionTag>
                </ConditionTags>
                <IsSystem>0</IsSystem>
                <IsEnabled>1</IsEnabled>
            </TagCondition>
        </TagConditions>
        <IsHidden>0</IsHidden>
        <IsSMAEnabled>0</IsSMAEnabled>
    </Source>
    <FieldNameMaps>
        <FieldNameMap>
            <Name>udfs1</Name>
            <DisplayName>sensor</DisplayName>
        </FieldNameMap>
        
    </FieldNameMaps>
</LoganContent>