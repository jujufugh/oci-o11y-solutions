<?xml version="1.0" encoding="UTF-8"?>
<LoganContent oms_version="2.50.2.0.0" name="content_ocid1.tenancy.oc1..aaaaaaaa5s2vdjjrydixjulorcwozffbpna37w5a35p3jhgpyshlkmio6oiq_1650039506307" content_version="2.50.2.0.0" xmlns="http://www.oracle.com/DataCenter/LogAnalyticsStd">
    <Field oms_version="2.50.2.0.0">
        <DisplayName>sensor</DisplayName>
        <FieldType>1</FieldType>
        <IsSystem>0</IsSystem>
        <IsPrimary>1</IsPrimary>
        <DataType>STRING</DataType>
        <IsMetricKeyEligible>0</IsMetricKeyEligible>
        <IsMetricValueEligible>0</IsMetricValueEligible>
        <FacetEligible>1</FacetEligible>
        <RangeFacetEligible>0</RangeFacetEligible>
        <TableEligible>1</TableEligible>
        <FacetPriority>1</FacetPriority>
        <Summarizable>1</Summarizable>
        <HighCardinality>1</HighCardinality>
        <LargeData>0</LargeData>
        <MultiValued>0</MultiValued>
        <SMAEnabledSetting>0</SMAEnabledSetting>
    </Field>
    
    <Tag>
<Name>#medium_severity_sensor</Name>
<DisplayName>Medium Severity Sensor</DisplayName>
<IsSystem>0</IsSystem>
<ProblemPriority>MEDIUM</ProblemPriority>
</Tag>
    <Source name="EBS Sensor: FIN AP Invoice with Orphan Accounting Event - Weekly" oms_version="2.50.2.0.0" configWarningSettings="0">
    <SourceType>database_sql</SourceType>
    <TargetTypes>
        <TargetType>omc_oracle_db_instance</TargetType>
        <TargetType>omc_oracle_pdb</TargetType>
    </TargetTypes>
    <DisplayName>EBS Sensor: FIN AP Invoice with Orphan Accounting Event - Weekly</DisplayName>
    <Description><![CDATA[All events referenced in the xla_events table should have corresponding transaction data referencing that event.]]></Description>
    <IsSystem>0</IsSystem>
    <IsSecureContent>1</IsSecureContent>
    <Patterns>
        <DBPattern dateTimeField="entrytime" dateTimeColumns="entrytime">
        <SQLQuery>
            <![CDATA[select 'ME$EBS_FIN_AP_ORPHAN_ACCTG_EVENTS_INVOICE' sensor, to_timestamp(to_char(sysdate, 'YYYY-MM-DD hh24:mi:ss'), 'YYYY-MM-DD hh24:mi:ss') entrytime, 'invoice_id:' || s.invoice_id || ', org_id:' || s.org_id key_data FROM (SELECT      invoice_id invoice_id,      org_id     org_id  FROM      (          WITH invs AS (              SELECT /*+ materialize */ DISTINCT                  invoice_id              FROM                  apps.ap_invoice_distributions_all              WHERE                  accounting_date BETWEEN ( trunc(sysdate) - 7 ) AND ( trunc(sysdate) + 3 )          )  /*SPLIT_HERE*/          SELECT /*+ ordered no_unnest use_nl(ai xte xe xah) */              ai.invoice_id,              ai.org_id          FROM              invs,              apps.ap_invoices_all              ai,              apps.xla_transaction_entities_upg xte,              apps.xla_events                   xe,              apps.xla_ae_headers               xah          WHERE                  xe.application_id = xte.application_id              AND xe.event_status_code <> 'P'              AND xe.event_id = xah.event_id (+)              AND xah.application_id (+) = xe.application_id              AND xte.entity_id = xe.entity_id              AND xte.application_id = 200              AND xte.entity_code = 'AP_INVOICES'              AND xte.ledger_id = ai.set_of_books_id              AND NOT EXISTS (                  SELECT                      'No Invoice rows exist for this event'                  FROM                      apps.ap_invoice_distributions_all aid                  WHERE                      aid.accounting_event_id = xe.event_id              )              AND NOT EXISTS (                  SELECT                      'No Distributions exist for the bc_event_id'                  FROM                      apps.ap_invoice_distributions_all aid                  WHERE                      aid.bc_event_id = xe.event_id              )              AND NOT EXISTS (                  SELECT                      'No payment rows exist for this event'                  FROM                      apps.ap_invoice_payments_all aip                  WHERE                      aip.accounting_event_id = xe.event_id              )              AND NOT EXISTS (                  SELECT                      'No payment history rows exists for this event'                  FROM                      apps.ap_payment_history_all aph                  WHERE                      aph.accounting_event_id = xe.event_id              )              AND NOT EXISTS (                  SELECT                      'No self assessed tax rows exists for this event'                  FROM                      apps.ap_self_assessed_tax_dist_all asatd                  WHERE                      asatd.accounting_event_id = xe.event_id              )              AND NOT EXISTS (                  SELECT                      'No self assessed tax rows exists for the bc_event_id'                  FROM                      apps.ap_self_assessed_tax_dist_all asatd                  WHERE                      asatd.bc_event_id = xe.event_id              )              AND NOT EXISTS (                  SELECT                      'No prepay history rows exists for this event'                  FROM                      apps.ap_prepay_history_all aprh                  WHERE                      aprh.accounting_event_id = xe.event_id              )              AND NOT EXISTS (                  SELECT                      'No prepayment history rows exists for the bc_event_id'                  FROM                      apps.ap_prepay_history_all apph                  WHERE                      apph.bc_event_id = xe.event_id              )              AND xe.event_type_code NOT IN ( 'MANUAL', 'REVERSAL', 'PREPAYMENT APPLICATION ADJ', 'INVOICE_BURDEN_VALIDATED', 'INVOICE_BURDEN_CANCELLED' )              AND ( xe.upg_batch_id IS NULL                    OR xe.upg_batch_id = - 9999 )              AND NOT EXISTS (                  SELECT                      'No final accounted headers'                  FROM                      apps.xla_ae_headers xah                  WHERE                          xah.event_id = xe.event_id                      AND xah.application_id = 200                      AND xah.entity_id = xte.entity_id                      AND xah.accounting_entry_status_code = 'F'                      AND xah.gl_transfer_status_code = 'Y'              )              AND nvl(xte.source_id_int_1, - 99) = ai.invoice_id              AND ai.invoice_id = invs.invoice_id          UNION ALL          SELECT /*+ ordered no_unnest use_nl(ai xte xah) */              ai.invoice_id,              ai.org_id          FROM              invs,              apps.ap_invoices_all              ai,              apps.xla_transaction_entities_upg xte,              apps.xla_ae_headers               xah          WHERE                  xah.application_id = xte.application_id              AND xte.entity_id = xah.entity_id              AND xte.application_id = 200              AND xte.entity_code = 'AP_INVOICES'              AND xte.ledger_id = ai.set_of_books_id              AND NOT EXISTS (                  SELECT                      'No Invoice rows exist for this event'                  FROM                      apps.ap_invoice_distributions_all aid                  WHERE                      aid.accounting_event_id = xah.event_id              )              AND NOT EXISTS (                  SELECT                      'No Distributions exist for the bc_event_id'                  FROM                      apps.ap_invoice_distributions_all aid                  WHERE                      aid.bc_event_id = xah.event_id              )              AND NOT EXISTS (                  SELECT                      'No payment rows exist for this event'                  FROM                      apps.ap_invoice_payments_all aip                  WHERE                      aip.accounting_event_id = xah.event_id              )              AND NOT EXISTS (                  SELECT                      'No payment history rows exists for this event'                  FROM                      apps.ap_payment_history_all aph                  WHERE                      aph.accounting_event_id = xah.event_id              )              AND NOT EXISTS (                  SELECT                      'No self assessed tax rows exists for this event'                  FROM                      apps.ap_self_assessed_tax_dist_all asatd                  WHERE                      asatd.accounting_event_id = xah.event_id              )              AND NOT EXISTS (                  SELECT                      'No self assessed tax rows exists for the bc_event_id'                  FROM                      apps.ap_self_assessed_tax_dist_all asatd                  WHERE                      asatd.bc_event_id = xah.event_id              )              AND NOT EXISTS (                  SELECT                      'No prepay history rows exists for this event'                  FROM                      apps.ap_prepay_history_all aprh                  WHERE                      aprh.accounting_event_id = xah.event_id              )              AND NOT EXISTS (                  SELECT                      'No prepayment history rows exists for the bc_event_id'                  FROM                      apps.ap_prepay_history_all apph                  WHERE                      apph.bc_event_id = xah.event_id              )              AND NOT EXISTS (                  SELECT                      ' Event for this header does not exist'                  FROM                      apps.xla_events xe                  WHERE                          xe.application_id = xah.application_id                      AND xe.event_id = xah.event_id              )              AND xah.event_type_code NOT IN ( 'MANUAL', 'REVERSAL', 'PREPAYMENT APPLICATION ADJ', 'INVOICE_BURDEN_VALIDATED', 'INVOICE_BURDEN_CANCELLED' )              AND ( xah.upg_batch_id IS NULL                    OR xah.upg_batch_id = - 9999 )              AND nvl(xah.gl_transfer_status_code, 'X') <> 'Y'              AND nvl(xah.accounting_entry_status_code, 'X') <> 'F'              AND nvl(xte.source_id_int_1, - 99) = ai.invoice_id              AND ai.invoice_id = invs.invoice_id          UNION ALL          SELECT /*+ ordered no_unnest use_nl(ai xte xe xah) */              ai.invoice_id,              ai.org_id          FROM              invs,              apps.ap_invoices_all              ai,              apps.xla_transaction_entities_upg xte,              apps.xla_events                   xe,              apps.xla_ae_headers               xah          WHERE                  xe.application_id = 200              AND xe.event_status_code = 'P'              AND xah.event_id = xe.event_id              AND xah.application_id = 200              AND xte.entity_id = xe.entity_id              AND xte.application_id = 200              AND xte.entity_code = 'AP_INVOICES'              AND xte.ledger_id = ai.set_of_books_id              AND NOT EXISTS (                  SELECT                      'No Invoice rows exist for this event'                  FROM                      apps.ap_invoice_distributions_all aid                  WHERE                      aid.accounting_event_id = xe.event_id              )              AND NOT EXISTS (                  SELECT                      'No Distributions exist for the bc_event_id'                  FROM                      apps.ap_invoice_distributions_all aid                  WHERE                      aid.bc_event_id = xe.event_id              )              AND NOT EXISTS (                  SELECT                      'No payment rows exist for this event'                  FROM                      apps.ap_invoice_payments_all aip                  WHERE                      aip.accounting_event_id = xe.event_id              )              AND NOT EXISTS (                  SELECT                      'No payment history rows exists for this event'                  FROM                      apps.ap_payment_history_all aph                  WHERE                      aph.accounting_event_id = xe.event_id              )              AND NOT EXISTS (                  SELECT                      'No self assessed tax rows exists for this event'                  FROM                      apps.ap_self_assessed_tax_dist_all asatd                  WHERE                      asatd.accounting_event_id = xe.event_id              )              AND NOT EXISTS (                  SELECT                      'No self assessed tax rows exists for the bc_event_id'                  FROM                      apps.ap_self_assessed_tax_dist_all asatd                  WHERE                      asatd.bc_event_id = xe.event_id              )              AND NOT EXISTS (                  SELECT                      'No prepay history rows exists for this event'                  FROM                      apps.ap_prepay_history_all aprh                  WHERE                      aprh.accounting_event_id = xe.event_id              )              AND NOT EXISTS (                  SELECT                      'No prepayment history rows exists for the bc_event_id'                  FROM                      apps.ap_prepay_history_all apph                  WHERE                      apph.bc_event_id = xe.event_id              )              AND xe.event_type_code NOT IN ( 'MANUAL', 'REVERSAL', 'PREPAYMENT APPLICATION ADJ', 'INVOICE_BURDEN_VALIDATED', 'INVOICE_BURDEN_CANCELLED' )              AND ( xe.upg_batch_id IS NULL                    OR xe.upg_batch_id = - 9999 )              AND nvl(xte.source_id_int_1, - 99) = ai.invoice_id              AND ai.invoice_id = invs.invoice_id  /*SPLIT_HERE*/      )  WHERE      ROWNUM < 11  ORDER BY      invoice_id) s]]>
        </SQLQuery>
        <IsInclude>1</IsInclude>
            <InUse>1</InUse>
            <DBQueryFieldList>
                <DBPatternSeqField>entrytime</DBPatternSeqField>
                <DBPatternField>
                    <DBQueryColName>sensor</DBQueryColName>
                    <FieldName>udfs1</FieldName>
                </DBPatternField>
                <DBPatternField>
                    <DBQueryColName>entrytime</DBQueryColName>
                    <FieldName>time</FieldName>
                </DBPatternField>
                <DBPatternField>
                                        <DBQueryColName>key_data</DBQueryColName>
                                        <FieldName>probkey</FieldName>
                                   </DBPatternField>
            </DBQueryFieldList>
            <IsSystem>0</IsSystem>
            <IsEnabled>1</IsEnabled>
            </DBPattern>
    </Patterns>
        <TagConditions>
            <TagCondition operator="CONTAINS_REGEX" field="udfs1" alertRuleVisible="0">
                <ConditionValues>
                    <ConditionValue>%</ConditionValue>
                </ConditionValues>
                <ConditionTags tagField="mtag">
                    <ConditionTag>#medium_severity_sensor</ConditionTag>
                </ConditionTags>
                <IsSystem>0</IsSystem>
                <IsEnabled>1</IsEnabled>
            </TagCondition>
        </TagConditions>
        <IsHidden>0</IsHidden>
        <IsSMAEnabled>0</IsSMAEnabled>
    </Source>
    <FieldNameMaps>
        <FieldNameMap>
            <Name>udfs1</Name>
            <DisplayName>sensor</DisplayName>
        </FieldNameMap>
        
    </FieldNameMaps>
</LoganContent>