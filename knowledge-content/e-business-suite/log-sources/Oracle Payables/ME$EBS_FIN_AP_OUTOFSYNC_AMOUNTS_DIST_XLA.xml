<?xml version="1.0" encoding="UTF-8"?>
<LoganContent oms_version="2.50.2.0.0" name="content_ocid1.tenancy.oc1..aaaaaaaa5s2vdjjrydixjulorcwozffbpna37w5a35p3jhgpyshlkmio6oiq_1650039506307" content_version="2.50.2.0.0" xmlns="http://www.oracle.com/DataCenter/LogAnalyticsStd">
    <Field oms_version="2.50.2.0.0">
        <DisplayName>sensor</DisplayName>
        <FieldType>1</FieldType>
        <IsSystem>0</IsSystem>
        <IsPrimary>1</IsPrimary>
        <DataType>STRING</DataType>
        <IsMetricKeyEligible>0</IsMetricKeyEligible>
        <IsMetricValueEligible>0</IsMetricValueEligible>
        <FacetEligible>1</FacetEligible>
        <RangeFacetEligible>0</RangeFacetEligible>
        <TableEligible>1</TableEligible>
        <FacetPriority>1</FacetPriority>
        <Summarizable>1</Summarizable>
        <HighCardinality>1</HighCardinality>
        <LargeData>0</LargeData>
        <MultiValued>0</MultiValued>
        <SMAEnabledSetting>0</SMAEnabledSetting>
    </Field>
    
    <Tag>
<Name>#medium_severity_sensor</Name>
<DisplayName>Medium Severity Sensor</DisplayName>
<IsSystem>0</IsSystem>
<ProblemPriority>MEDIUM</ProblemPriority>
</Tag>
    <Source name="EBS Sensor: FIN AP Out of sync amounts between Invoice distributions and XLA Distribution Links - Weekly" oms_version="2.50.2.0.0" configWarningSettings="0">
    <SourceType>database_sql</SourceType>
    <TargetTypes>
        <TargetType>omc_oracle_db_instance</TargetType>
        <TargetType>omc_oracle_pdb</TargetType>
    </TargetTypes>
    <DisplayName>EBS Sensor: FIN AP Out of sync amounts between Invoice distributions and XLA Distribution Links - Weekly</DisplayName>
    <Description><![CDATA[Checking for out of sync amounts between invoice and XLA distributions updated after they are accounted.]]></Description>
    <IsSystem>0</IsSystem>
    <IsSecureContent>1</IsSecureContent>
    <Patterns>
        <DBPattern dateTimeField="entrytime" dateTimeColumns="entrytime">
        <SQLQuery>
            <![CDATA[select 'ME$EBS_FIN_AP_OUTOFSYNC_AMOUNTS_DIST_XLA' sensor, to_timestamp(to_char(sysdate, 'YYYY-MM-DD hh24:mi:ss'), 'YYYY-MM-DD hh24:mi:ss') entrytime, 'invoice_id:' || s.invoice_id key_data FROM (SELECT      invoice_id invoice_id  FROM      (          WITH invs AS (              SELECT /*+ materialize */ DISTINCT                  invoice_id              FROM                  apps.ap_invoice_distributions_all              WHERE                  accounting_date BETWEEN ( trunc(sysdate) - 7 ) AND ( trunc(sysdate) + 3 )          )  /*SPLIT_HERE*/          SELECT /*+ ordered use_nl(ai, aid, xdl, xe, xah, xal) */              ai.invoice_id invoice_id          FROM              invs,              apps.ap_invoices_all              ai,              apps.ap_invoice_distributions_all aid,              apps.xla_distribution_links       xdl,              apps.xla_events                   xe,              apps.xla_ae_headers               xah,              apps.gl_ledgers                   gl,              apps.xla_ae_lines                 xal          WHERE                  ai.invoice_id = invs.invoice_id              AND xah.ledger_id = gl.ledger_id              AND gl.sla_ledger_cash_basis_flag = 'N'              AND ai.invoice_id = aid.invoice_id              AND aid.line_type_lookup_code NOT IN ( 'PREPAY', 'AWT', 'NONREC_TAX', 'REC_TAX', 'TRV',                                                     'TERV', 'TIPV' )              AND aid.prepay_distribution_id IS NULL              AND aid.accounting_event_id = xe.event_id              AND xe.event_status_code = 'P'              AND xe.process_status_code = 'P'              AND nvl(xe.budgetary_control_flag, 'N') = 'N'              AND xe.event_id = xah.event_id              AND xah.balance_type_code = 'A'              AND xah.application_id = 200              AND xah.application_id = xe.application_id              AND xah.application_id = xal.application_id              AND xah.application_id = xdl.application_id              AND xah.parent_ae_header_id IS NULL              AND xah.ae_header_id = xal.ae_header_id              AND nvl(xah.upg_batch_id, - 9999) = - 9999              AND xal.accounting_class_code = 'LIABILITY'              AND xah.ae_header_id = xdl.ae_header_id              AND xal.ae_line_num = xdl.ae_line_num              AND xdl.source_distribution_type = 'AP_INV_DIST'              AND xdl.source_distribution_id_num_1 = aid.invoice_distribution_id              AND EXISTS (                  SELECT /*+ no_unnest */                      1                  FROM                      apps.ap_invoice_distributions_all aid2                  WHERE                          aid2.invoice_id = aid.invoice_id                      AND aid2.line_type_lookup_code IN ( 'NONREC_TAX', 'REC_TAX', 'TIPV', 'TERV', 'TRV' )                      AND aid2.invoice_line_number = aid.invoice_line_number                      AND aid2.charge_applicable_to_dist_id = aid.invoice_distribution_id                      AND aid2.posted_flag = 'Y'              )              AND ( nvl(xdl.unrounded_entered_cr, xdl.unrounded_entered_dr) <> abs(aid.amount)                    OR NOT EXISTS (                  SELECT /*+ no_unnest */                      1                  FROM                      apps.ap_invoice_distributions_all aid3,                      apps.xla_ae_headers               xah2,                      apps.xla_distribution_links       xdl2                  WHERE                          aid3.invoice_id = aid.invoice_id                      AND aid3.line_type_lookup_code IN ( 'NONREC_TAX', 'REC_TAX', 'TIPV', 'TERV', 'TRV' )                      AND aid3.invoice_line_number = aid.invoice_line_number                      AND aid3.charge_applicable_to_dist_id = aid.invoice_distribution_id                      AND xah2.ledger_id = xah.ledger_id                      AND xah2.application_id = xah.application_id                      AND xdl2.application_id = xah.application_id                      AND xah2.event_id = aid3.accounting_event_id                      AND xah2.ae_header_id = xdl2.ae_header_id                      AND xdl2.source_distribution_type = 'AP_INV_DIST'                      AND xdl2.source_distribution_id_num_1 = aid3.invoice_distribution_id              ) )              AND ROWNUM < 11          UNION ALL          SELECT /*+ ordered use_nl(ai, aid, xdl, xe, xah, xal) */              ai.invoice_id invoice_id          FROM              invs,              apps.ap_invoices_all              ai,              apps.ap_invoice_distributions_all aid,              apps.xla_distribution_links       xdl,              apps.xla_events                   xe,              apps.xla_ae_headers               xah,              apps.gl_ledgers                   gl,              apps.xla_ae_lines                 xal          WHERE                  ai.invoice_id = invs.invoice_id              AND aid.invoice_id = ai.invoice_id              AND aid.line_type_lookup_code NOT IN ( 'PREPAY', 'AWT' )              AND aid.prepay_distribution_id IS NULL              AND xe.event_id = aid.accounting_event_id              AND xe.event_status_code = 'P'              AND xe.process_status_code = 'P'              AND xe.application_id = 200              AND nvl(xe.budgetary_control_flag, 'N') = 'N'              AND xah.event_id = xe.event_id              AND xah.application_id = xe.application_id              AND xah.balance_type_code = 'A'              AND xah.parent_ae_header_id IS NULL              AND nvl(xah.upg_batch_id, - 9999) = - 9999              AND gl.ledger_id = xah.ledger_id              AND gl.sla_ledger_cash_basis_flag = 'N'              AND xal.ae_header_id = xah.ae_header_id              AND xal.application_id = xah.application_id              AND xal.accounting_class_code = 'LIABILITY'              AND xdl.source_distribution_type = 'AP_INV_DIST'              AND xdl.source_distribution_id_num_1 = aid.invoice_distribution_id              AND xdl.application_id = xah.application_id              AND xdl.ae_header_id = nvl(xal.ae_header_id, 0)              AND xdl.ae_line_num = nvl(xal.ae_line_num, 0)              AND ( ( abs(nvl(aid.base_amount, aid.amount)) <> abs(nvl(xdl.unrounded_accounted_cr, 0) - nvl(xdl.unrounded_accounted_dr,              0))                      AND xah.ledger_id = ai.set_of_books_id )                    OR ( ( abs(aid.amount) <> abs(nvl(xdl.unrounded_entered_cr, 0) - nvl(xdl.unrounded_entered_dr, 0)) )                         AND xah.ledger_id <> ai.set_of_books_id ) )              AND ROWNUM < 11          UNION ALL          SELECT /*+ ordered use_nl(ai, aid, xe, xah, xte) */              ai.invoice_id invoice_id          FROM              invs,              apps.ap_invoices_all              ai,              apps.ap_invoice_distributions_all aid,              apps.xla_events                   xe,              apps.xla_transaction_entities_upg xte,              apps.xla_ae_headers               xah,              apps.gl_ledgers                   gl          WHERE                  xah.ledger_id = gl.ledger_id              AND gl.sla_ledger_cash_basis_flag = 'N'              AND ai.invoice_id = aid.invoice_id              AND aid.line_type_lookup_code NOT IN ( 'PREPAY', 'AWT' )              AND aid.prepay_distribution_id IS NULL              AND xe.event_id = aid.accounting_event_id              AND nvl(xe.budgetary_control_flag, 'N') = 'N'              AND xah.event_id = xe.event_id              AND xah.application_id = 200              AND xah.balance_type_code = 'A'              AND xah.parent_ae_header_id IS NULL              AND NOT ( aid.line_type_lookup_code IN ( 'ERV', 'TERV' )                        AND xah.ledger_id <> ai.set_of_books_id )              AND xe.application_id = 200              AND xe.event_status_code = 'P'              AND xe.process_status_code = 'P'              AND xe.entity_id = xte.entity_id              AND xte.application_id = 200              AND xte.entity_code = 'AP_INVOICES'              AND xte.source_id_int_1 = ai.invoice_id              AND nvl(xah.upg_batch_id, - 9999) = - 9999              AND NOT EXISTS (                  SELECT /*+ no_unnest */                      1                  FROM                      apps.xla_distribution_links xdl                  WHERE                          xah.application_id = xdl.application_id                      AND xah.ae_header_id = xdl.ae_header_id                      AND xdl.source_distribution_type = 'AP_INV_DIST'                      AND xdl.source_distribution_id_num_1 = aid.invoice_distribution_id              )              AND ai.invoice_id = invs.invoice_id              AND ROWNUM < 11  /*SPLIT_HERE*/      )  ORDER BY      invoice_id) s]]>
        </SQLQuery>
        <IsInclude>1</IsInclude>
            <InUse>1</InUse>
            <DBQueryFieldList>
                <DBPatternSeqField>entrytime</DBPatternSeqField>
                <DBPatternField>
                    <DBQueryColName>sensor</DBQueryColName>
                    <FieldName>udfs1</FieldName>
                </DBPatternField>
                <DBPatternField>
                    <DBQueryColName>entrytime</DBQueryColName>
                    <FieldName>time</FieldName>
                </DBPatternField>
                <DBPatternField>
                                        <DBQueryColName>key_data</DBQueryColName>
                                        <FieldName>probkey</FieldName>
                                   </DBPatternField>
            </DBQueryFieldList>
            <IsSystem>0</IsSystem>
            <IsEnabled>1</IsEnabled>
            </DBPattern>
    </Patterns>
        <TagConditions>
            <TagCondition operator="CONTAINS_REGEX" field="udfs1" alertRuleVisible="0">
                <ConditionValues>
                    <ConditionValue>%</ConditionValue>
                </ConditionValues>
                <ConditionTags tagField="mtag">
                    <ConditionTag>#medium_severity_sensor</ConditionTag>
                </ConditionTags>
                <IsSystem>0</IsSystem>
                <IsEnabled>1</IsEnabled>
            </TagCondition>
        </TagConditions>
        <IsHidden>0</IsHidden>
        <IsSMAEnabled>0</IsSMAEnabled>
    </Source>
    <FieldNameMaps>
        <FieldNameMap>
            <Name>udfs1</Name>
            <DisplayName>sensor</DisplayName>
        </FieldNameMap>
        
    </FieldNameMaps>
</LoganContent>